TODO:  Tidy this file up.

# numbers on /etc/fstab entry for fsck
# hostname exists in the /etc/hosts file too!
# still get NOTICE: the software on this Raspberry Pi has not been fully configured
# we should turn off swap Adding 102396k swap on /var/swap                           

Make script shrinkImg - take source from raspi-install.txt.
     It should take a img file and output an img file with smaller / partition.
     and zip it (or print instructions).


Support all microphones (USB) - set volume in a device independent
way.  What are the sample rates?

get bluetooth connection working.  all that BNEP stuff. 

Then (after netwrokgin above...) get web interface going.

Clacker: it was fragile but did work.  How to do more complex
playbacks in the field?  Hardware is the difficult bit.
  Design a
playback system with nice interface.

Refactor switchoff.sh script as GPIOhandler.py/sh and make it interrupt driven so we can have better responsiveness.


silence the /etc/profile.d/raspi-config crap from system (should probably go in provision.sh)
      /usr/bin/raspi-config (need to delete the line from /etc/inittab, and uncomment the other?)


Need to add a section about GPU_split=32 or whatever.
turn off swap

=========================================================
Networking - wirelessly:
==========
sudo echo "
network={
    ssid=\"BTHomeHub2-5QCP\"
    psk=\"d6346cbcb2\"
    key_mgmt=WPA-PSK
}
" >> slash/etc/wpa_supplicant/wpa_supplicant.conf 
EOF

================================================================
RTC (make sure rtc is plugged in)
---
sudo apt-get purge fake-hwclock
sudo apt-get install i2c-tools bootlogd emacs23-nox
sudo update-rc.d hwclock.sh defaults
sudo update-rc.d hwclock.sh enable

sudo nano /etc/modules ( append: i2c-dev i2c-bcm2708)
sudo nano /etc/modprobe.d/raspi-blacklist.conf # remove i2c line

# add this just before the case .. start) stanza
sudo emacs -nw /etc/init.d/hwclock.sh
"echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device"

sudo reboot (if you want to test / set the rtc)

# sudo i2cdetect -y 0 (or 0)
# sudo hwclock -r
================================================================

================================================================
vmon
====
sudo emacs -nw /boot/config.txt [disable_camera_led=1]
# reboot if you care about the light now.
mkdir /mnt/sdcard/vmondata/
cp (from somewhere) takePhoto to /mnt/sdcard/vmondata/
# run it to test it.
crontab -e
*/2 * * * *    /mnt/sdcard/vmondata/takePhoto

# then ensure we have passwordless login to jdmc2.com
ssh-keygen
ssh-copy-id jdmc2.com

==============================================================================
webserver
=========
sudo apt-get install apache2 libapache2-mod-suphp
sudo a2enmod userdir 

sudo emacs -nw /etc/apache2/conf.d/amondata.conf

Alias /amondata /mnt/amondata
<Directory /mnt/amondata>
  Options Indexes
  Order allow,deny
  Allow from all
  Require all granted
  Satisfy Any
</Directory>

mkdir /home/jdmc2/public_html/
mkdir /home/jdmc2/public_html/utils/
#scp -prv jdmc2.com:websites/jdmc2.com/utils public_html

sudo nano /etc/suphp/suphp.conf
edit it so that 
* allow_file_group_write true
* allow_directory_group_writable true
* change "check vhost tree" to false.

sudo service apache2 restart
wget localhost

to get suphp going:
http://www.debiantutorials.com/installing-suphp/

apt-get install libapache2-mod-suphp
a2dismod php5
/etc/init.d/apache2 restart

==================================================

Compression
===========

Just tested lame.  on 1 minute.  lame -f is 5x realtime, and lame (default) is 3.38 realtime.  
lame	3.38RT	9.0%			
lame -f 4.96RT  9.0% (sizes are exactly the same since CBR of 64Kbps)
lame process size is less than 5MB of ram running.

------------------------------

# disable camera led 
sudo nano /boot/config.txt
[ disable_camera_led=1

-----------------------------

audio input dongle

deployments:
mount on arcticCat
mount in car (in cabin or elsewhere?)
bats

develop:
compress audio
record video
pir sensor?
durie camera (still camera is fine).

TODO:
	
straighten out logic in amoncleanup, with its no-ops and stuff.  think
we need a are-we-running function which returns yes/no.  if yes, its
cos everything is running well, if NO its because were not running.
If there is an error, it should clear out the error and leave things
NOT running.  I think.  sort out fake-hw clock, which saves / restores
estimated times over reboots.  Is this worth trying ?  Surely...
clarify use of local.settings - warn about defaults, how about amon
config to show what it will do.

--------------------
serial console cable
--------------------
lsusb:
ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port
wire: black to ground, white to Tx, green to Rx.  on outside row:
..GTR.........  (ground transmit receive) (black, white, green)
can also attach red to pins to the left (both 5V) to power the pi from USB.

boot the pi
then run this on the laptop (you need to be in group dialout)
screen /dev/ttyUSB0 115200

and you should see the login prompt.  if you can not type, use minicom
to turn off flow control.  8-N-1 bit arrangement.

PPP: set up pppd to accept point-to-point internet link.
sudo apt-get install pppd 
hmmm - ppp not easy...

===========================================
fsck:
# To clone a working amon machine, put card into memorycard reader then
# I did this:
sudo fsck.fat  -a -V -v /dev/sdc1  # to check the filesystems on the memcard.
sudo fsck -f -p -v /dev/sdc2       # to check the filesystems on the memcard.

=============================================

#finally, copy the card to local hard drive
sudo dd bs=512 count=5785600 if=/dev/sdc of=amonruns.img
sync

-------
timestamp log file: add date to arecord output:

tail -f /mnt/sdcard/amondata/wavs/arecord.log | while read line ; do date=`date +"%Y-%m-%d %H-%M-%S"` ; uptime=`uptime`; echo $date $uptime $line ; done
----

--------------------
sudo apt-get --compile source alsa-utils
installs and compiles source.  BUT you need to add lots of dependentpackages

================

I got bluetooth tethering working between my laptop and andriod phone
(pc gets internet through phone) via bluetooth by enableing tethering
on the phone, and then using the gui bluetooth thing in ubuntu to
conect to the android's network service.

bluetooth:
sudo apt-get install bluetooth bluez-utils bluez-compat 
hciconfig dev       # can we see local device
hciconfig up        # bring up local device
hciconfig status    # to check
hcitool scan        # scan for devices with
sudo bluez-simple-agent hci0 00:1F:E1:E5:C5:A5 # pair with him (pins ensue)
sudo bluez-test-device list  # list paired devices.


sdptool browse local # list services offered by "local" sevice

Then make the master (my pc) listen for 

sudo l2ping 00:1F:81:00:08:30 # run me on laptop

sudo l2ping  00:1F:E1:E5:C5:A5 # run me on pi

# connect from pi:
sudo pand -c 00:1F:E1:E5:C5:A5 --role PANU --persist 30

# setup PC to listen for connections
