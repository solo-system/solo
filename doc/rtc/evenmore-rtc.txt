---------------------------------------------------------------------------
2017-08-24 3pm
--------------

OK - I'm done with clocks for this round / release

We are using all the systemd tools, with no modifications.  timesyncd
does network sync really fast (faster than I can log in through serial
console). It sets the rtc too.

so the "set" phase when the solo is networked works really well.
And the "read" phase, when we are in the field works really well too.

And that's that.  We now do "no fiddling" with systemd stuff.  This is
"stock raspbian" (which is (in turn) stock systemd), I think.


---------------------------------------------------------------------------
2017-08-24


Right I am horribly depressed about all this again - I've his this so
many times over the years, and I'm dreading sorting it all out.
Moreover, the bad logic is now embedded in systemd, deep in "meson"
the build environemnt they use.

But I need to get it right.

Summary: There are 2 issues:

1) VERY early in systemd it sets the system time to the date on the
NEWS file in the systemd source directory - it gets hard wired by
meson at build time into the ELF of systemd.  There appears to be no
way to change this unless we edit the meson environment and rebuild
systemd.  I _really_ don't want to have to do this.

2) Later in the boot, systemd has this date-time.file cache file that
ensures (initial and?) subsequent boots are monotonically increasing.
This works like fake=-hwclock.sh on raspbian.


Solutions:

*** try hard to work with systemd's default stuff.  Even to the point
of using timesyncd.

*** problem (1) above - just accept it.  You'll get a _bad_ time on
    early boot, but that's ok, in normal operation the RTC will
    overwrite this really soon.

    If the RTC is absent, we'll stick with that bad time, and the
    operator will have to notice.

    publish time-machine.py for all.
    Encourage people to speak the time into the microphone.

*** problem (2) above is only a problem after a reboot, and Solo
    doesn't really do reboots anyway at the moment, so that's a corner
    case worry.

The conculsion is that we will use all default settings in systemd (and not install ntp).

Plan:
	1) comment out all timesync stuff from provision, pre-provision and solo-boot.
	2) leave all the hw RTC /dev/rtc0 stuff, since we still need to see the clock.
	3) build an image

	TEST: Standard Conditions:
	      PHASE 1:
	      - prepare a pi with net and fresh clock (new battery).
	      - boot with fresh sosi
	      - login over serial to check that time is set
	      - also check over serial that hwclock is set.
	      - GOOD - hwclock is set (how long did it take?)

	      - PHASE 2:
	      - remove network (keep serial), and boot with FRESH IMAGE
	      - on serial console - check "amon find" to see if time is correctly set.

	      If the above works, we have covered the MAIN situation - a SOLO with a working clock (it sets and it gets used!).

	      Shout YAY and that's enough.

	      It worked.
	      tested with both types of clock.
	      And tested on both USB microphones.



2017-08-20
----------

I promised I wouldn't get here, but here I am.  Something is setting
the time, and I don't know what.  a bare a+ with no clock and no
network boots to a "time" of 3 Nov 2016 at 17:17".  (I'm looking
thourgh a serial console).

I see from source code of systemd.git/NEWS that new functionality was
recently added. Of course systemd is to blame, and once again it is
insanely hard to diagnose.  But read this:

      * On boot-up, when PID 1 detects that the system clock is behind the
        release date of the systemd version in use, the clock is now set
        to the latter. Previously, this was already done in timesyncd, in order
        to avoid running with clocks set to the various clock epochs such as
        1902, 1938 or 1970. With this change the logic is now done in PID 1
        in addition to timesyncd during early boot-up, so that it is enforced
        before the first process is spawned by systemd. Note that the logic
        in timesyncd remains, as it is more comprehensive and ensures
        clock monotonicity by maintaining a persistent timestamp file in
        /var. Since /var is generally not available in earliest boot or the
        initrd, this part of the logic remains in timesyncd, and is not done
        by PID 1.

Well, at least that explains it, even if it's really hard to fix.
The change is shown in git show  021dd87bc055a5bfb2dcef83fc868fe24648b959

the corresponding log message is:
Nov 03 17:16:42 solo systemd[1]: System time before build time, advancing clock.

File is:  ~/git/remotes/systemd/systemd/src/core/main.c




2017-08-18
----------

There is yet another raspbian release.  Based on Stretch. Need to
ensure systemd still doesn't use timedatectl / rsynctimed to do ntp
stuff, and still has /etc/init.d/ntp enabled.

so we need to install ntp during provision.  This (through an override in systemd - see systemd-analyse delta) disables systemd-timesyncd).




2017-08-11
----------
Provision/install/boot-solo.sh should do this:

From Raspian to SOSI:
Flash stock rapbian
touch /boot/ssh
uncomment: dtparam=i2c_arm=on
enable both clocks:
 dtoverlay=i2c-rtc,ds3231
 dtoverlay=i2c-rtc,mcp7941x
sudo apt-get -y purge fake-hwclock

AND WE GET:

system boots and has /dev/rtc0, but doesn't read the time.
 So: todo:
     1) sort out _reading_ hctosys on boot (and do it early).  See old method.
     2) check booting with usb-network-dongle sets botht the time and the hwclock.
        ... and now long that takes.

     3) /lib/udev/hwclock-set is what the current system now does.  It's called from udev, if we get rid of the exclusionary stanza:
     sed -i "s:/run/systemd/system:/i/am/nonexistent:g"  /lib/udev/hwclock-set (done in the provision.sh)
     So something, (udev, I guess) forces this file to run when /dev/rtc0 is created?  Or something?

     NEWINFO:  udev takes action when enabling /dev/rtc0, it runs one of it's "rules" from /lib/udev/rules.d/85-hwclock.rules, which says to run KERNEL=="rtc0", RUN+="/lib/udev/hwclock-set $root/$name".  So /lib/udev/hwclock-set GETS RUN. And this sets the system clock from the hw clock.
     And That's That.
     more info probably from enabling more loggin in udev via /etc/udev/udev.conf (err,info,debug)
     



-------------------------------------------
HW: to get /dev/rtc0 present:
 - dtparam=i2c_arm=on (uncomment)
 - dtoverlay=i2c-rtc,ds3231 (or dtoverlay=i2c-rtc,mcp7941x for piface-shim)
 - haven't tested what happens if we do both.
 
That's it for hardware
---------------------------------------------

---------------------------------------------------------------------------
Software:
---------

Stock raspbian lite doesn use systemd-timesyncd to sync time.

 - Fake-hwclock is still in use (creating /using /etc/fake-hwclock.data)
 - confirmed by removing it, rebooting (no net), time correct, file returned.
 - I am logged in over USB-serial.
 - so disable fake-hwclock: apt-get purge fake-hwclock
 - and confirmed it removed /etc/init.d/fake-hwclock and /sbin/fake-hwclock.
 - and confirm with reboot
 - yahoo - get 1970.

At tis point we can run hwclock -r, and we see a time of Jan 2000



Systemd investigations (written on 2017-08-16):
-----------------------------------------------

Look - timesyncd is disabled:
systemctl is-enabled systemd-timesyncd

unit files are in:
/lib/systemd/system	- the original full unit files.
/lib/systemd/           - the executables (ELFL systemd-timesyncd)

But whether a service is enabled or not depends on the contents of the
"wants" directories in: /etc/systemd/system.  I think this is how the
"tree" of dependencies is built up within systemd.  Through symlinks.
The "Wants" are got from the "install" sections of the unit files, so
when you enable a service (via systemctl enable XXX) it checks that
the unit files (which ones?) and plops the appropriate symlinks into
the .wants directories.

Note that "systemd-analyze critical-chain" prints the tree of startup jobs.

systemd-analyze -h - for more options.
systemd-analyze plot >  /tmp/b.svg # is particularly good as it gives a svg plot (for browser)

Note: dhcpcd takes  a long time, and its probably to do with this:
pi@raspberrypi:/etc/systemd/system $ systemd-delta
[EXTENDED]   /lib/systemd/system/dhcpcd.service → /etc/systemd/system/dhcpcd.service.d/wait.conf
[EXTENDED]   /lib/systemd/system/rc-local.service → /etc/systemd/system/rc-local.service.d/ttyoutput.conf

The wait.conf file for dhcpd overrides the normal behaviour to add
"-w", which "waits for an address on each interface".  Dunno why
raspbian people did this.  But it's not clock stuff so shouldn't be
discussed here.

more info about the /boot/ssh is in tbox/notes/systemd-cheatsheet.txt

Note: systemd keeps it's "time cache" in /var/lib/systemd/clock
