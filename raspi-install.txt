TODO: add a bit to remove the /etc/profile.d/raspi-config crap from system
      should probably go in provision.sh

To build an image:
------------------
> get new raspbian
> dd it to a card: 
sudo dd bs=4M if=~/raspi/images/2014-09-09-wheezy-raspbian.img of=/dev/sdc
sync

> plug it in a raspi, boot and log in as root: ssh raspberrypi -l pi
sudo su
cd /opt
git clone jdmc2@jdmc2.com:git/recorder
cd recorder
chmod +x /opt/recorder/provision.sh
./provision.sh

once it's back in your PC: 
sudo e2fsck -f /dev/sdc2
Resize the ext filesystem:
find min allowable size:
sudo resize2fs -P /dev/sdb2
(answer is in 4k slices).  Add 200M (50,000 units)
sudo resize2fs -p /dev/sdc2 329240

> now resize it's containing partition /dev/sdc2:
sudo fdisk -l /dev/sdc
d
2
n
p
2
122880 ( or whatever ORIGINAL START position was)
+1316960K  (where that is 4 times what resize2fs was ordered to do)
w
> and that's it.  fdisk -l (on PC) now looks like:

Disk /dev/sdc: 31.9 GB, 31914983424 bytes
64 heads, 32 sectors/track, 30436 cylinders, total 62333952 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x00090806

   Device Boot      Start         End      Blocks   Id  System
/dev/sdc1            8192      122879       57344    c  W95 FAT32 (LBA)
/dev/sdc2          122880     2756799     1316960   83  Linux


============================================


HOW ABOUT sudo touch /forcefsck somewhere?

---------------------------
the resulting image can be dd'd (same command line, different image) to a sd card, and It'll run on a raspi.
can be done from windows now, though.


=======================================


TODO: add these to this build procedure, AND to flash-card.sh
# remove all files in /var/log
find mnt-root/var/log -type f -delete

#remove any stray amon.log's
rm -f home/jdmc2/amon/amon.log

add: amixer -q -c 1 set 'Mic' 15dB (done - see flash-card.sh)

Need to add a section about GPU_split=32 or whatever.

--------------------------------------------
META of below:
--------------
change /etc/hostname
set timezone somehow
add line to /etc/fstab to mount data partition
make a mount point for sd card
add network config
add jdmc2 user with groups
change root password
add to /etc/rc.local for rtc and setting amixer default volume
reconfigure tzdata
general apt-get update upgrade ; rpi-update  and then purge of wolfram HERE do system slimdown
install amon from jdmc2.com
add to bashrc
add to crontab


Installing raspbian in a raspberry pi.
===============================================================
# get raspbian: from http://downloads.rasbperrypi.org
# unzip and check it with sha1sum

Flash SD card:
--------------
umount /dev/sdX #ensure it's unmounted
sudo dd bs=4M if=~/raspi/2014-06-20-wheezy-raspbian.img of=/dev/sdX
sync

# Add, Primary, 3, BEWARE first block, end is default, w to write to disk. (THIS SHOULD BE DONE LATER)
#sudo fdisk /dev/sdX
#sudo mkfs.ext4 /dev/sdc3

#mkdir slash ; sudo mount /dev/sdc2 slash  # to mount / 
#sudo emacs -nw slash/etc/hostname (and set new hostname)
#sudo emacs -nw slash/etc/timezone (Europe/London) (do this later)

### now transfer to a raspi (with ethernet), and do the following:

sudo nano /etc/hostname  (change to recorder)



sudo bash <<EOF
 echo "aug11" > slash/etc/hostname
 echo "Europe/London" > slash/etc/timezone
 echo "/dev/mmcblk0p3  /mnt/sdcard     ext4    defaults,noatime  0       2" >> slash/etc/fstab
 sudo mkdir slash/mnt/sdcard
 sudo echo "
network={
    ssid=\"BTHomeHub2-5QCP\"
    psk=\"d6346cbcb2\"
    key_mgmt=WPA-PSK
}
" >> slash/etc/wpa_supplicant/wpa_supplicant.conf 
EOF

# TODO: run sync in cron every minute

sudo umount slash
sync

============================================================
To configure a system to become a bootable image:

----------
ssh raspberrypi -l pi 
#sudo passwd root
sudo adduser jdmc2
sudo adduser amon

sudo usermod -a -G adm,dialout,cdrom,kmem,sudo,audio,video,plugdev,games,users,netdev,input,gpio jdmc2
sudo usermod -a -G adm,dialout,cdrom,kmem,sudo,audio,video,plugdev,games,users,netdev,input,gpio amon

sudo nano /etc/sudoers to add jdmc2 and amon
su amon to continue...
sudo nano /etc/rc.local  [ add /opt/vc/bin/tvservice -off ]
     	  		 [ add amixer -q -c 1 set 'Mic' 15dB ]
sudo dpkg-reconfigure tzdata
sudo raspi-config  (for hostname and nothing else really)
sudo apt-get purge wolfram-engine
sudo apt-get update && sudo apt-get -y upgrade
sudo rpi-update

sudo reboot

================================================================
RTC (make sure rtc is plugged in)
---
sudo apt-get purge fake-hwclock
sudo apt-get install i2c-tools bootlogd emacs23-nox
sudo update-rc.d hwclock.sh defaults
sudo update-rc.d hwclock.sh enable

sudo nano /etc/modules ( append: i2c-dev i2c-bcm2708)
sudo nano /etc/modprobe.d/raspi-blacklist.conf # remove i2c line

# add this just before the case .. start) stanza
sudo emacs -nw /etc/init.d/hwclock.sh
"echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device"

sudo reboot (if you want to test / set the rtc)

# sudo i2cdetect -y 0 (or 0)
# sudo hwclock -r
================================================================
reboot-switch  ( this should really live in /home/amon/bin/)
-------------
SERVER=jdmc2.com
scp jdmc2.com:recorder/switchoff.py ~
chmod +x switchoff.py

sudo nano /etc/rc.local
add: /home/amon/switchoff.py &

================================================================
amon
----
scp -pr jdmc2@jdmc2.com:code/amon .
nano .bashrc  #  -- add at end: PATH=$PATH:$HOME/amon/
#sudo mkdir /mnt/sdcard/amondata
#sudo chown -R jdmc2.jdmc2 /mnt/sdcard/amondata
# test with:
bash # to reload PATH
amon ping
amon off (so it doesnt costantly try to run during install).

crontab -e
*/2 * * * *       /home/jdmc2/amon/amon watchdog >> /home/jdmc2/amon/cron.log 2>&1

===================================================================
firstboot
---------
sudo scp -pr jdmc2@jdmc2.com:recorder/firstboot.sh /root/
sudo chmod +x /root/firstboot.sh
### add to crontab/rc.s but NOT YET (only when we know WE won't reboot).

===============================================================================
vmon
----
sudo emacs -nw /boot/config.txt [disable_camera_led=1]
# reboot if you care about the light now.
mkdir /mnt/sdcard/vmondata/
cp (from somewhere) takePhoto to /mnt/sdcard/vmondata/
# run it to test it.
crontab -e
*/2 * * * *    /mnt/sdcard/vmondata/takePhoto

# then ensure we have passwordless login to jdmc2.com
ssh-keygen
ssh-copy-id jdmc2.com

==============================================================================
webserver
---------
sudo apt-get install apache2 libapache2-mod-suphp
sudo a2enmod userdir 

sudo emacs -nw /etc/apache2/conf.d/amondata.conf

Alias /amondata /mnt/amondata
<Directory /mnt/amondata>
  Options Indexes
  Order allow,deny
  Allow from all
  Require all granted
  Satisfy Any
</Directory>

mkdir /home/jdmc2/public_html/
mkdir /home/jdmc2/public_html/utils/
#scp -prv jdmc2.com:websites/jdmc2.com/utils public_html

sudo nano /etc/suphp/suphp.conf
edit it so that 
* allow_file_group_write true
* allow_directory_group_writable true
* change "check vhost tree" to false.

sudo service apache2 restart
wget localhost

=======================================================================

to get suphp going:
http://www.debiantutorials.com/installing-suphp/

apt-get install libapache2-mod-suphp
a2dismod php5
/etc/init.d/apache2 restart


==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================

TODO:
	need a memory checker to ensure we dont fill up the disk, and turn off when its full.
	remove the bail out in reboot-handler.
	sort out how to controll the boot-state of alsamixer.  There is probably alsamixer-save and alsamixer-store 
	run it outside a few times, unplugging and see that its good.
	Deal with batteries and connectors, and give to Robbie.	
	move the mnt directory to /mnt - permissions should hold.
Later:
	straighten out logic in amoncleanup, with its no-ops and stuff.  think we need a are-we-running 
  	function which returns yes/no.  if yes, its cos everything is running well, if NO its because 
	were not running.  If there is an error, it should clear out the error and leave things NOT running.  I think.
	sort out fake-hw clock, which saves / restores estimated times over reboots.  Is this worth trying ?  Surely...
	clarify use of local.settings - warn about defaults, how about amon config to show what it will do.

Just tested lame.  on 1 minute.  lame -f is 5x realtime, and lame (default) is 3.38 realtime.  
lame	3.38RT	9.0%			
lame -f 4.96RT  9.0% (sizes are exactly the same since CBR of 64Kbps)
lame process size is less than 5MB of ram running.

arecord --mmap -D hw:1,0 -v --file-type wav -f S16_LE -c1 -r44100 --max-file-time 60  --process-id-file ./pidfile --use-strftime ./audio-pi8-%Y-%m-%d-%H-%M-%S.wav


to mke a fat partition need:   
   > sudo apt-get install dosfstools
   > sudo mkfs.vfat /dev/mmcblk0p3
   > sudo mkdir /mnt/amondata
   > sudo nano /etc/fstab
   /dev/mmcblk0p3  /mnt/amondata   vfat    rw,uid=1001,gid=1002,flush  0  0
   > sudo mount -a

--------------------------------

# disable camera led 
sudo nano /boot/config.txt
[ disable_camera_led=1

-----------------------------

==========================================================================
TODO:
-----

audio input dongle
wireless dongles

deployments:
mount on arcticCat
mount in car (in cabin or elsewhere?)
Robbie - record with 
bats

develop:
solar?
compress audio
record video
pir sensor?
durie camera (still camera is fine).

---------------------------------------------
purge out unwated stuff
=======================

(list installed pachages with 
dpkg --get-selections

sudo apt-get purge wolfram-engine
sudo apt-get autoremove
----------------------------------------
mounting img files with offset:
fdisk -l 2014-06-20-wheezy-raspbian.img
sudo mount -o loop,offset=$((122880*512)) 2014-06-20-wheezy-raspbian.img mnt/

------------------------------------


--------------------
serial console cable
--------------------
lsusb:
ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port
wire: black to ground, white to Tx, green to Rx.  on outside row:
..GTR.........  (ground transmit receive) (black, white, green)
can also attach red to pins to the left (both 5V) to power the pi from USB.

boot the pi
then run this on the laptop (you need to be in group dialout)
screen /dev/ttyUSB0 115200

and you should see the login prompt.  if you can not type, use minicom
to turn off flow control.  8-N-1 bit arrangement.

PPP: set up pppd to accept point-to-point internet link.
sudo apt-get install pppd 
hmmm - ppp not easy...

===========================================
fast flash:
-----------

#To clone a working amon machine, put card into memorycard reader then
# I did this:
sudo fsck.fat  -a -V -v /dev/sdc1  # to check the filesystems on the memcard.
sudo fsck -f -p -v /dev/sdc2       # to check the filesystems on the memcard.

#finally, copy the card to local hard drive
sudo dd bs=512 count=5785600 if=/dev/sdc of=amonruns.img
sync

this "count" number matches from the fdisk -l end+1 of p2.
new one (sept 2014) is a 3276800000byte image, so count is 6400000 (which agrees with fdisk -l /dev/sdc


# now try writing it to a new card.
sudo dd bs=4M if=amonruns.img of=/dev/sdc
# check partition table:
sudo fdisk -l /dev/sdc
# and rebuild ext2fs on p3
sudo mkfs.ext4 /dev/sdc3
sync
# now move it to a pi and run it.

PROBLEM - need a directory owned by jdmc2.jdmc2 on SD card.
could do it here , but id's don't match so its messy.
could make it part of the amon code (no directory - making it now) but that needs root access.  Perhaps if it were 

PROBLEM2: hostname is the same. Is this a problem?s

PROBLEM3: fsck does not run? or doesnt appear to work right.

-------
timestamp log file: add date to arecord output:

tail -f /mnt/sdcard/amondata/wavs/arecord.log | while read line ; do date=`date +"%Y-%m-%d %H-%M-%S"` ; uptime=`uptime`; echo $date $uptime $line ; done
----

to set system time from internet, do :

sudo ntpdate -s time.nist.gov
(needs sudo apt-get install ntpdate)
then set hwclock from system:
/sbin/hwclock -w

--------------------
sudo apt-get --compile source alsa-utils
installs and compiles source.  BUT you need to add lots of dependentpackages
